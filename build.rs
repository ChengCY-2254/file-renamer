use chrono::FixedOffset;
use std::fmt::Display;
use std::io::Write;
use std::path::Path;
use std::process::Command;

fn main() -> Result<(), std::io::Error> {
    let git = match GitMessage::new() {
        Ok(git) => git,
        // 没有拿到消息也不要报错
        Err(_) => return Ok(()),
    };
    let code = CodeGenerate::generate(&git);
    let mut cache = Cache::new();

    cache.write_str(
        r#"#![allow(dead_code)]
// This file is auto generated by build.rs"#,
    );
    cache.write_str(code);
    cache.save_to("./src/build_info.rs")
}

struct Cache(String);

impl Cache {
    fn new() -> Self {
        Self(String::new())
    }
    fn write_str(&mut self, content: impl AsRef<str>) {
        self.0.push_str(content.as_ref());
    }
    fn write_line(&mut self, line: impl AsRef<str>) {
        self.0.push_str(line.as_ref());
        self.0.push('\n');
    }
    fn write_code(&mut self, code: impl CodeGenerate) {
        self.0.push_str(&code.generate());
    }
    fn save_to<P: AsRef<Path>>(self, path: P) -> Result<(), std::io::Error> {
        let mut build_info = std::fs::File::create(path)?;
        build_info.write_all(self.0.as_bytes())?;
        Ok(())
    }
}
#[derive(Debug)]
struct GitMessage {
    hash: String,
    hash_7: String,
    build_time: String,
}

impl GitMessage {
    pub fn new() -> Result<Self, std::io::Error> {
        let git_command = "git rev-parse HEAD";
        #[cfg(target_os = "windows")]
        let cmd_output = Command::new("cmd").arg("/C").arg(git_command).output()?;
        #[cfg(not(target_os = "windows"))]
        let cmd_output = Command::new("sh").arg("-c").arg(git_command).output()?;

        let git_hash = String::from_utf8(cmd_output.stdout)
            .unwrap()
            .trim()
            .to_string();
        let git_hash_7 = git_hash[0..7].to_string();
        let time_zone = FixedOffset::east_opt(8 * 3600).unwrap();
        let utc_time = chrono::Utc::now()
            .with_timezone(&time_zone)
            .format("%Y-%m-%d %H:%M:%S")
            .to_string();
        Ok(Self {
            hash: git_hash,
            hash_7: git_hash_7,
            build_time: utc_time,
        })
    }
}

/// rust code generate trait
trait CodeGenerate {
    fn generate(&self) -> String;
}

impl CodeGenerate for GitMessage {
    fn generate(&self) -> String {
        format!(
            r#"
pub const GIT_HASH:&str = "{}";
pub const GIT_HASH_7:&str = "{}";
pub const BUILD_TIME:&str = "UTC+8 {}";
        "#,
            self.hash, self.hash_7, self.build_time
        )
    }
}
